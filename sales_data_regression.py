# -*- coding: utf-8 -*-
"""Sales_Data_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1De2B9fd_6ONOSX5ns-uxnmJ58gMwBHdw
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

sales_data = pd.read_excel('/content/sales price prediction_TV.xlsx')
print(sales_data)

print(sales_data.isnull().sum())

sales_data.info()

sales_data.columns

sales_data.describe(include="all")

sales_data.head()

sales_data.tail()

import plotly.express as px
import plotly.graph_objects as go

figure = px.scatter(data_frame = sales_data, x="Sales", y="TV", size="TV", trendline="ols")
figure.show()

figure = px.scatter(data_frame = sales_data, x="Sales", y="Newspaper", size="Newspaper", trendline="ols")
figure.show()

figure = px.scatter(data_frame = sales_data, x="Sales", y="Radio", size="Radio", trendline="ols")
figure.show()

correlation = sales_data.corr()
print(correlation["Sales"])          #the parameter should dependent Variable

feature_col = ["TV", "Radio", "Newspaper"]
x = sales_data[feature_col]
y = sales_data.Sales

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)    #x_train - Input dat for training
                                                                                              #y_train - Output data for training
                                                                                              #x_test - Input data for testing
                                                                                              #y_test - Output data for testing ,to compare the midel's prediction during test

display(x_train.shape, x_test.shape, y_train.shape, y_test.shape)

#we are choosing the Linear Regression
model = LinearRegression()
model.fit(x_train, y_train)
y_pred = model.predict(x_test)

print(y_pred)
print(y_test)


from sklearn.metrics import mean_absolute_error,mean_squared_error,mean_squared_log_error , r2_score

#R-SQUARE CHECK   #to check overall accuracy for all 3 input variables
print("R-Square Value:",r2_score(y_test, y_pred))

print('Mean Absolute Error Rate:', mean_absolute_error(y_test, y_pred))

print('Mean Squared Error:', mean_squared_error(y_test, y_pred))


"""After Deploying the model"""
#features = [["TV", "Radio", "Newspaper"]]
features = np.array([[200, 40, 69]])
print(model.predict(features))
